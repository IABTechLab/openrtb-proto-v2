syntax = "proto2";

import "openrtb.proto";
option java_outer_classname = "OpenRtbExt";
package com.iabtechlab.openrtb.v2;

// Copyright 2019 IAB Tech Lab
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Ad Exchange extensions for the Regs object.
message RegsExt {
  // Callers should fill this field solely based on whether the impression
  // will serve to an EEA user, based on information available to them. It
  // does not constitute legal guidance on GDPR.
  optional bool gdpr = 1;

  // OpenRTB Extension for US Privacy (CCPA)
  optional string us_privacy = 2;
}

extend com.iabtechlab.openrtb.v2.BidRequest.Regs {
  // Extension key for the Adx Regs.ext
  optional RegsExt regs = 201;
}

message UniversalId {
  // Cookie or platform-native identifier.
  optional string id = 1;

  // Type of user agent the match is from.  It is highly recommended to set
  // this, as many DSPs separate app-native IDs from browser-based IDs and
  // require a type value for ID resolution.
  enum AgentType {
    AGENT_TYPE_UNKNOWN = 0;
    WEB = 1;
    APP = 2;
    PERSON_BASED = 3;
  }
  optional int32 atype = 2;

  // Extensions.
  extensions 100 to 9999;
}

// Extended identifiers support in the OpenRTB specification allows buyers to
// use audience data in real-time bidding.  The exchange should ensure that
// business agreements allow for the sending of this data.  Note, it is
// assumed that exchanges and DSPs will collaborate with the appropriate
// regulatory agencies and ID vendor(s) to ensure compliance.
message ExtendedId {
  // Source or technology provider responsible for the set of included IDs.
  // Expressed as a top-level domain.
  optional string source = 1;

  // Array of extended ID UID objects from the given source.
  repeated UniversalId uids = 2;

  // Extensions.
  extensions 100 to 9999;
}

// Ad Exchange extensions for the User object.
message UserExt {
  // Consent string as specified in the IAB Transparency and Consent
  // Framework v2.
  optional string consent = 1;

  // Extended (third-party) identifiers for this user.
  repeated ExtendedId eids = 2;
}

extend com.iabtechlab.openrtb.v2.BidRequest.User {
  // Extension key for User standard extensions.
  optional UserExt user = 202;
}

// This object represents both the links in the supply chain as well as an
// indicator whether or not the supply chain is complete.
message SupplyChain {
  // Flag indicating whether the chain contains all nodes involved in the
  // transaction leading back to the owner of the site, app or other medium of
  // the inventory, where 0 = no, 1 = yes.
  optional bool complete = 1;

  // Version of the supply chain specification in use, in the format of
  // “major.minor”. For example, for version 1.0 of the spec, use the string
  // “1.0”.
  optional string ver = 2;

  // Array of SupplyChainNode objects in the order of the chain. In a complete
  // supply chain, the first node represents the initial advertising system and
  // seller ID involved in the transaction, i.e. the owner of the site, app, or
  // other medium. In an incomplete supply chain, it represents the first known
  // node. The last node represents the entity sending this bid request.
  repeated SupplyChainNode nodes = 3;

  // Extensions.
  extensions 100 to 9999;
}

// This object is associated with a SupplyChain object as an array of nodes.
// These nodes define the identity of an entity participating in the supply
// chain of a bid request.
message SupplyChainNode {
  // The canonical domain name of the SSP, Exchange, Header Wrapper, etc system
  // that bidders connect to. This may be the operational domain of the system,
  // if that is different than the parent corporate domain, to facilitate WHOIS
  // and reverse IP lookups to establish clear ownership of the delegate system.
  // This should be the same value as used to identify sellers in an ads.txt
  // file if one exists.
  optional string asi = 1;

  // The identifier associated with the seller or reseller account within the
  // advertising system. This must contain the same value used in transactions
  // (i.e. OpenRTB bid requests) in the field specified by the SSP/exchange.
  // Typically, in OpenRTB, this is publisher.id. For OpenDirect it is typically
  // the publisher’s organization ID. Should be limited to 64 characters in
  // length.
  optional string sid = 2;

  // The OpenRTB RequestId of the request as issued by this seller.
  optional string rid = 3;

  // The name of the company (the legal entity) that is paid for inventory
  // transacted under the given seller_id. This value is optional and should NOT
  // be included if it exists in the advertising system’s sellers.json file.
  optional string name = 4;

  // The business domain name of the entity represented by this node. This value
  // is optional and should NOT be included if it exists in the advertising
  // system’s sellers.json file.
  optional string domain = 5;

  // Indicates whether this node will be involved in the flow of payment for the
  // inventory. When set to 1, the advertising system in the asi field pays the
  // seller in the sid field, who is responsible for paying the previous node in
  // the chain. When set to 0, this node is not involved in the flow of payment
  // for the inventory. For version 1.0 of SupplyChain, this property should
  // always be 1. It is explicitly required to be included as it is expected
  // that future versions of the specification will introduce non-payment
  // handling nodes. Implementers should ensure that they support this field and
  // propagate it onwards when constructing SupplyChain objects in bid requests
  // sent to a downstream advertising system.
  optional bool hp = 6;

  // Extensions.
  extensions 100 to 9999;
}

// Ad Exchange extensions for the Source object.
message SourceExt {
  // The SupplyChain object enables buyers to see all parties who are selling or
  // reselling a given bid request.
  optional SupplyChain schain = 1;

  // Identifier of the OM SDK integration. This is the same as the "name"
  // parameter of the OMID Partner object.
  optional string omidpn = 2;

  // Version of the OM SDK integration. This is the same as the "versionString"
  // parameter of the OMID Partner object.
  optional string omidpv = 3;
}

extend com.iabtechlab.openrtb.v2.BidRequest.Source {
  // Extension key for Source standard extensions.
  optional SourceExt source = 203;
}

// SKAdNetwork object list attributes.
message SKAdNetworkList {
  // Implies a list of SKAdNetwork IDs up to and including this value.
  optional int32 max = 1;

  // List of registration IDs to be excluded from the IABTL shared list.
  repeated int32 excl = 2;

  // List of string SKAdNetwork IDs not included in the IABTL shared list.
  // The intention of addl is to be the permanent home for raw SKAdNetwork
  // IDs, migrating away from BidRequest.imp.ext.skadn.skadnetids.
  // Recommended that this list not exceed 10.
  repeated string addl = 3;

  // Extensions.
  extensions 100 to 9999;
}

// Publisher's SKAdNetwork information to support app installation
// attribution for iOS 14 and later. Apple's SKAdNetwork API helps
// advertisers measure ad-driven app installation by sending a postback
// to the ad network after a successful install. Publishers will need
// to configure supported ad networks in their app's property list
// (Info.plist) to allow an install to be attributed to the ad impression.
// For more info visit:
// https://developer.apple.com/documentation/storekit/skadnetwork
message SKAdNetworkRequest {
  // Version of SKAdNetwork supported. Dependent on both the OS version
  // and the SDK version.
  // Note: With the release of SKAdNetwork 2.1, this field is deprecated in
  // favor of the BidRequest.imp.ext.skadn.versions to support an array of
  // version numbers.
  optional string version = 1;

  // ID of publisher app in Apple's App Store. Should match app.bundle in
  // OpenRTB 2.x and app.storeid in AdCOM 1.x.
  optional string sourceapp = 2;

  // A subset of SKAdNetworkItem entries in the publisher app’s Info.plist
  // that are relevant to the DSP. Recommended that this list not exceed 10.
  // Note: BidRequest.imp.ext.skadn.skadnetlist.addl is the preferred method
  // to express raw SKAdNetwork IDs.
  repeated string skadnetids = 3;

  // Object containing the IABTL list definition.
  optional SKAdNetworkList skadnetlist = 4;

  // Array of strings containing the supported SKAdNetwork versions. Always
  // "2.0" or higher. Dependent on both the OS version and the SDK version.
  repeated string versions = 5;

  // Extensions.
  extensions 100 to 9999;
}

// Ad Exchange extensions for the Imp object.
message ImpExt {
  // Publisher's SKAdNetwork information.
  optional SKAdNetworkRequest skadn = 1;
}

extend com.iabtechlab.openrtb.v2.BidRequest.Imp {
  // Extension key for Imp standard extensions.
  optional ImpExt imp = 204;
}

// Ad Exchange extensions for the Device object.
message DeviceExt {
  // (iOS Only) An integer passed to represent the app's app tracking
  // authorization status.
  enum Atts {
    NOT_DETERMINED = 0;
    RESTRICTED = 1;
    DENIED = 2;
    AUTHORIZED = 3;
  }
  optional int32 atts = 1;

  // IDFV of the device in that publisher. Listed as ifv to match ifa field
  // format.
  optional string ifv = 2;
}

extend com.iabtechlab.openrtb.v2.BidRequest.Device {
  // Extension key for Device standard extensions.
  optional DeviceExt device = 205;
}

// SKAdNetwork fidelity attributes.
message SKAdNetworkFidelity {
  // The fidelity-type of the attribution to track.
  enum Fidelity {
    VIEW_THROUGH = 0;
    STOREKIT_RENDERED = 1;
  }
  optional int32 fidelity = 1;

  // An id unique to each ad response. Refer to Apple’s documentation for the
  // proper UUID format requirements:
  // https://developer.apple.com/documentation/storekit/skstoreproductparameteradnetworknonce
  optional string nonce = 2;

  // Unix time in millis string used at the time of signature.
  optional string timestamp = 3;

  // SKAdNetwork signature as specified by Apple.
  optional string signature = 4;

  // Extensions.
  extensions 100 to 9999;
}

// Advertiser's SKAdNetwork information to support app installation
// attribution for iOS 14 and later.  Apple's SKAdNetwork API helps
// advertisers measure ad-driven app installation by sending a postback
// to the ad network after a successful install. Ad networks will need
// to send their network ID and signed advertiser information to allow
// an install to be attributed to the ad impression.
// For more info visit:
// https://developer.apple.com/documentation/storekit/skadnetwork
message SKAdNetworkResponse {
  // Version of SKAdNetwork desired. Must be 2.0 or above.
  optional string version = 1;

  // Ad network identifier used in signature. Should match one of the items
  // in the skadnetids array in the request.
  optional string network = 2;

  // Campaign ID compatible with Apple's spec. As of 2.0, should be an
  // integer between 1 and 100, expressed as a string.
  optional string campaign = 3;

  // ID of advertiser's app in Apple's app store. Should match
  // BidResponse.seatbid.bid.bundle.
  optional string itunesitem = 4;

  // An id unique to each ad response. Refer to Apple’s documentation for
  // the proper UUID format requirements.
  // Note: With the release of SKAdNetwork v2.2, this field is deprecated in
  // favor of the BidResponse.seatbid.bid.ext.skadn.fidelities.nonce to support
  // multiple fidelity-types.
  optional string nonce = 5;

  // ID of publisher’s app in Apple’s app store. Should match
  // BidRequest.imp.ext.skad.sourceapp.
  optional string sourceapp = 6;

  // Unix time in millis used at the time of signature generation.
  // Note: With the release of SKAdNetwork 2.2, this field is deprecated in
  // favor of the BidResponse.seatbid.bid.ext.skadn.fidelities.timestamp to
  // support multiple fidelity-types.
  optional string timestamp = 7;

  // SKAdNetwork signature as specified by Apple.
  // Note: With the release of SKAdNetwork 2.2, this field is deprecated in
  // favor of the BidResponse.seatbid.bid.ext.skadn.fidelities.signature to
  // support multiple fidelity-types.
  optional string signature = 8;

  // Supports multiple fidelity types introduced in SKAdNetwork v2.2.
  repeated SKAdNetworkFidelity fidelities = 9;

  // Extensions.
  extensions 100 to 9999;
}

// Ad Exchange extensions for the Bid object.
message BidExt {
  // Advertiser's SKAdNetwork information.
  optional SKAdNetworkResponse skadn = 1;
}

extend com.iabtechlab.openrtb.v2.BidResponse.SeatBid.Bid {
  // Extension key for Bid standard extensions.
  optional BidExt bid = 206;
}

// Ad Exchange extensions for the Data object.
message DataExt {
  // Taxonomy for the segments in this Data object.
  // Refer to enum SegmentTaxonomy (to be added) for generic values.
  optional int32 segtax = 1;
}

extend com.iabtechlab.openrtb.v2.BidRequest.Data {
  // Extension key for Data standard extensions.
  optional DataExt data = 207;
}
